name: Sirius CI/CD Pipeline

on:
  push:
    branches: [main, sirius-demo]
  pull_request:
    branches: [main]
  repository_dispatch:
    types: [submodule-update]

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: siriusscan

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      submodule_changes: ${{ steps.changes.outputs.submodule_changes }}
      sirius_ui_changes: ${{ steps.changes.outputs.sirius_ui_changes }}
      sirius_api_changes: ${{ steps.changes.outputs.sirius_api_changes }}
      sirius_engine_changes: ${{ steps.changes.outputs.sirius_engine_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Determine Changed Files
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            # Set changes based on which submodule was updated
            SUBMODULE="${{ github.event.client_payload.submodule }}"
            echo "submodule_changes=true" >> $GITHUB_OUTPUT
            echo "Submodule update detected: $SUBMODULE"
            
            # Extract repository name from full path
            REPO_NAME=$(echo $SUBMODULE | awk -F'/' '{print $NF}')
            
            case $REPO_NAME in
              "go-api")
                echo "Affects both sirius-api and sirius-engine"
                echo "sirius_api_changes=true" >> $GITHUB_OUTPUT
                echo "sirius_engine_changes=true" >> $GITHUB_OUTPUT
                ;;
              "app-scanner"|"app-terminal"|"sirius-nse"|"app-agent")
                echo "Affects sirius-engine"
                echo "sirius_engine_changes=true" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "Unknown submodule, rebuilding everything"
                echo "sirius_ui_changes=true" >> $GITHUB_OUTPUT
                echo "sirius_api_changes=true" >> $GITHUB_OUTPUT
                echo "sirius_engine_changes=true" >> $GITHUB_OUTPUT
                ;;
            esac
          else
            # For direct pushes/PRs, detect actual file changes
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              BASE_SHA=${{ github.event.pull_request.base.sha }}
              HEAD_SHA=${{ github.event.pull_request.head.sha }}
            else
              # For push events
              BASE_SHA=${{ github.event.before }}
              HEAD_SHA=${{ github.event.after }}
            fi
            
            # Check if files in specific directories changed
            git diff --name-only $BASE_SHA $HEAD_SHA > changed_files.txt
            
            if grep -q "sirius-ui/" changed_files.txt; then
              echo "UI changes detected"
              echo "sirius_ui_changes=true" >> $GITHUB_OUTPUT
            fi
            
            if grep -q "sirius-api/" changed_files.txt; then
              echo "API changes detected"
              echo "sirius_api_changes=true" >> $GITHUB_OUTPUT
            fi
            
            if grep -q "sirius-engine/" changed_files.txt || grep -q "rabbitmq/" changed_files.txt; then
              echo "Engine or RabbitMQ changes detected"
              echo "sirius_engine_changes=true" >> $GITHUB_OUTPUT
            fi
            
            # If docker files or CI changed, rebuild everything
            if grep -q -E "(Dockerfile|\.github/|docker-compose)" changed_files.txt; then
              echo "Docker or CI changes detected, rebuilding everything"
              echo "sirius_ui_changes=true" >> $GITHUB_OUTPUT
              echo "sirius_api_changes=true" >> $GITHUB_OUTPUT
              echo "sirius_engine_changes=true" >> $GITHUB_OUTPUT
            fi
            
            # If nothing specific changed but we have changes, rebuild everything
            if [ ! -s changed_files.txt ]; then
              echo "General changes detected, rebuilding everything"
              echo "sirius_ui_changes=true" >> $GITHUB_OUTPUT
              echo "sirius_api_changes=true" >> $GITHUB_OUTPUT
              echo "sirius_engine_changes=true" >> $GITHUB_OUTPUT
            fi
          fi

  build-and-push:
    name: Build & Push Images
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.sirius_ui_changes == 'true' || needs.detect-changes.outputs.sirius_api_changes == 'true' || needs.detect-changes.outputs.sirius_engine_changes == 'true'
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
    steps:
      - name: Checkout Sirius repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate metadata
        id: meta
        run: |
          # Set submodule commit SHAs based on repository_dispatch or use 'main' as default
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            SUBMODULE="${{ github.event.client_payload.submodule }}"
            REPO_NAME=$(echo $SUBMODULE | awk -F'/' '{print $NF}')
            COMMIT_SHA="${{ github.event.client_payload.commit_sha }}"
            
            # Uppercase for Dockerfile ARGs
            REPO_NAME_UPPER=$(echo $REPO_NAME | tr '-' '_' | tr 'a-z' 'A-Z')
            echo "${REPO_NAME_UPPER}_COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
            
            echo "Submodule $REPO_NAME commit SHA: $COMMIT_SHA"
          fi

          # Set image tags based on event type
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            TAG="pr-${{ github.event.number }}"
          elif [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            TAG="latest"
            echo "also_tag_beta=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            TAG="latest"
            echo "also_tag_beta=true" >> $GITHUB_OUTPUT
          else
            TAG="dev"
          fi
          
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated image tag: $TAG"

      - name: Build and push sirius-ui
        if: needs.detect-changes.outputs.sirius_ui_changes == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./sirius-ui
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/sirius-ui:${{ steps.meta.outputs.image_tag }}
            ${{ steps.meta.outputs.also_tag_beta == 'true' && format('{0}/{1}/sirius-ui:beta', env.REGISTRY, env.IMAGE_NAMESPACE) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push sirius-api
        if: needs.detect-changes.outputs.sirius_api_changes == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./sirius-api
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            GO_API_COMMIT_SHA=${{ env.GO_API_COMMIT_SHA || 'main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/sirius-api:${{ steps.meta.outputs.image_tag }}
            ${{ steps.meta.outputs.also_tag_beta == 'true' && format('{0}/{1}/sirius-api:beta', env.REGISTRY, env.IMAGE_NAMESPACE) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push sirius-engine
        if: needs.detect-changes.outputs.sirius_engine_changes == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./sirius-engine
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            GO_API_COMMIT_SHA=${{ env.GO_API_COMMIT_SHA || 'main' }}
            APP_SCANNER_COMMIT_SHA=${{ env.APP_SCANNER_COMMIT_SHA || 'main' }}
            APP_TERMINAL_COMMIT_SHA=${{ env.APP_TERMINAL_COMMIT_SHA || 'main' }}
            SIRIUS_NSE_COMMIT_SHA=${{ env.SIRIUS_NSE_COMMIT_SHA || 'main' }}
            APP_AGENT_COMMIT_SHA=${{ env.APP_AGENT_COMMIT_SHA || 'main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/sirius-engine:${{ steps.meta.outputs.image_tag }}
            ${{ steps.meta.outputs.also_tag_beta == 'true' && format('{0}/{1}/sirius-engine:beta', env.REGISTRY, env.IMAGE_NAMESPACE) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    name: Integration Test
    needs: [detect-changes, build-and-push]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.sirius_ui_changes == 'true' || needs.detect-changes.outputs.sirius_api_changes == 'true' || needs.detect-changes.outputs.sirius_engine_changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create test environment
        run: |
          # Create test docker-compose configuration
          cat > docker-compose.test.yml << EOF
          name: sirius-test
          services:
            sirius-postgres:
              image: postgres:15-alpine
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres
                POSTGRES_DB: sirius_test
              tmpfs: 
                - /var/lib/postgresql/data # Use RAM for CI testing
          
            sirius-rabbitmq:
              image: rabbitmq:3.7.3-management
          
            sirius-valkey:
              image: valkey/valkey:latest

            sirius-ui:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/sirius-ui:${{ needs.build-and-push.outputs.image_tag }}
              environment:
                - NODE_ENV=test
                - SKIP_ENV_VALIDATION=1
                - DATABASE_URL=postgresql://postgres:postgres@sirius-postgres:5432/sirius_test
                - NEXTAUTH_SECRET=test-secret
                - NEXTAUTH_URL=http://localhost:3000
                - SIRIUS_API_URL=http://sirius-api:9001
                - NEXT_PUBLIC_SIRIUS_API_URL=http://localhost:9001
              depends_on:
                - sirius-postgres
          
            sirius-api:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/sirius-api:${{ needs.build-and-push.outputs.image_tag }}
              environment:
                - GO_ENV=test
                - API_PORT=9001
                - POSTGRES_HOST=sirius-postgres
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=postgres
                - POSTGRES_DB=sirius_test
                - POSTGRES_PORT=5432
                - VALKEY_HOST=sirius-valkey
                - VALKEY_PORT=6379
                - RABBITMQ_URL=amqp://guest:guest@sirius-rabbitmq:5672/
                - LOG_LEVEL=debug
              depends_on:
                - sirius-postgres
                - sirius-rabbitmq
                - sirius-valkey
          
            sirius-engine:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/sirius-engine:${{ needs.build-and-push.outputs.image_tag }}
              environment:
                - GO_ENV=test
                - ENGINE_MAIN_PORT=5174
                - GRPC_AGENT_PORT=50051
                - POSTGRES_HOST=sirius-postgres
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=postgres
                - POSTGRES_DB=sirius_test
                - POSTGRES_PORT=5432
                - VALKEY_HOST=sirius-valkey
                - VALKEY_PORT=6379
                - RABBITMQ_URL=amqp://guest:guest@sirius-rabbitmq:5672/
                - LOG_LEVEL=debug
              depends_on:
                - sirius-rabbitmq
          EOF

      - name: Run integration test
        run: |
          echo "Starting integration test..."
          
          # Start infrastructure services
          docker compose -f docker-compose.test.yml up -d sirius-postgres sirius-rabbitmq sirius-valkey
          
          # Wait for infrastructure
          echo "Waiting for infrastructure services..."
          sleep 20
          
          # Start application services based on what was built
          SERVICES_TO_TEST=""
          
          if [ "${{ needs.detect-changes.outputs.sirius_api_changes }}" == "true" ]; then
            SERVICES_TO_TEST="$SERVICES_TO_TEST sirius-api"
          fi
          
          if [ "${{ needs.detect-changes.outputs.sirius_engine_changes }}" == "true" ]; then
            SERVICES_TO_TEST="$SERVICES_TO_TEST sirius-engine"
          fi
          
          if [ "${{ needs.detect-changes.outputs.sirius_ui_changes }}" == "true" ]; then
            SERVICES_TO_TEST="$SERVICES_TO_TEST sirius-ui"
          fi
          
          if [ -n "$SERVICES_TO_TEST" ]; then
            docker compose -f docker-compose.test.yml up -d $SERVICES_TO_TEST
            
            # Wait for services to start
            echo "Waiting for application services..."
            sleep 30
            
            # Check service health
            echo "Checking service status..."
            docker compose -f docker-compose.test.yml ps
            
            # Basic smoke tests
            echo "Running smoke tests..."
            if echo "$SERVICES_TO_TEST" | grep -q "sirius-api"; then
              docker compose -f docker-compose.test.yml exec -T sirius-api sh -c "ps aux | grep sirius-api || true"
            fi
            
            if echo "$SERVICES_TO_TEST" | grep -q "sirius-engine"; then
              docker compose -f docker-compose.test.yml exec -T sirius-engine sh -c "ps aux | grep start-enhanced || true"
            fi
            
            echo "✅ Integration test completed"
          else
            echo "No services to test"
          fi
          
          # Cleanup
          docker compose -f docker-compose.test.yml down

  # Dispatch to sirius-demo repository when sirius-demo branch is updated
  dispatch-demo-deployment:
    name: Dispatch Demo Deployment
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push, test]
    if: github.ref == 'refs/heads/sirius-demo' && github.event_name == 'push' && always() && (needs.detect-changes.result == 'success' || needs.detect-changes.result == 'skipped') && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    steps:
      - name: Dispatch to sirius-demo repository
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: SiriusScan/sirius-demo
          event-type: sirius-demo-updated
          client-payload: |
            {
              "source_repo": "${{ github.repository }}",
              "source_branch": "${{ github.ref_name }}",
              "source_sha": "${{ github.sha }}",
              "triggered_by": "${{ github.actor }}",
              "commit_message": "${{ github.event.head_commit.message }}"
            }
