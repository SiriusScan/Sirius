[
  {
    "id": "0",
    "title": "PHASE 0: Foundation Setup & Planning",
    "description": "Establish development environment, fix critical issues, and prepare infrastructure for agent enhancements.",
    "details": "Key Outputs: Terminal scan command working, development environment configured, initial SBOM database schema, project structure established.",
    "status": "done",
    "priority": "high",
    "dependencies": [],
    "subtasks": [
      {
        "id": "0.1",
        "title": "Fix Terminal Scan Command Communication",
        "description": "Diagnose and fix the agent scan command execution from sirius-ui terminal interface.",
        "details": "The terminal scan command currently fails to execute properly. Need to investigate: agent command registration, terminal-to-agent communication protocol, agent server/client connection, JSON response formatting. Ensure 'internal:scan' command is properly registered and responds with structured data.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Terminal scan command communication fully functional. Agent 'scan' command properly registered and responds with structured JSON data. gRPC communication established, agent connects to sirius-engine server on port 50051, command execution working through terminal interface. All test criteria met.",
        "priority": "high",
        "dependencies": [],
        "testStrategy": "Execute 'scan' command from sirius-ui terminal, verify JSON response returned within 30 seconds, test error handling with meaningful messages."
      },
      {
        "id": "0.2",
        "title": "Setup Development Environment for Agent Enhancement",
        "description": "Configure local development environment for agent development and testing.",
        "details": "Setup extended development mode with local repository mounts for app-agent. Ensure proper volume mounting in docker-compose.local.yaml for app-agent directory. Verify live code changes reflect in container. Setup debugging capabilities for agent development.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Development environment fully configured. App-agent directory properly mounted at /app-agent in sirius-engine container, live code changes reflected in container, Go development tools available, debugging capabilities established. Docker-compose setup working correctly.",
        "priority": "high",
        "dependencies": [],
        "testStrategy": "Make code changes in app-agent, verify changes reflected in running container, test debugging capabilities."
      },
      {
        "id": "0.3",
        "title": "Create Database Migration for SBOM Schema",
        "description": "Design and implement database schema extensions for SBOM and system fingerprinting data.",
        "details": "Add new JSONB columns to hosts table: software_inventory, system_fingerprint, agent_metadata. Create migration script with proper rollback support. Ensure indexes for efficient querying. Design JSONB structure for packages, certificates, hardware info, network config.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Comprehensive SBOM schema migration completed via 004_add_sbom_schema. Added all three JSONB columns (software_inventory, system_fingerprint, agent_metadata) with NOT NULL constraints and default '{}'::jsonb values. Created comprehensive GIN and BTREE indexes for efficient querying including specific indexes for packages, hardware, network, and agent metadata. Implemented default data initialization for existing hosts, complete rollback capability, and migration verification. Schema fully supports agent scan data persistence and correlation with vulnerability data.",
        "priority": "high",
        "dependencies": ["0.1"],
        "testStrategy": "Run migration on test database, verify columns created, test JSONB queries, verify rollback functionality."
      },
      {
        "id": "0.4",
        "title": "Establish Agent Enhancement Project Structure",
        "description": "Create directory structure and initial files for new agent capabilities.",
        "details": "Create new directories: internal/detect/, internal/fingerprint/, internal/repository/, templates/, scripts/. Add placeholder files with proper package structures. Update go.mod dependencies for YAML parsing, cryptographic operations. Setup initial interfaces and type definitions.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Project structure fully established. All required directories created: internal/detect/, internal/fingerprint/, internal/repository/, templates/, scripts/. Go package structures implemented with proper interfaces and type definitions. Dependencies updated for YAML parsing and cryptographic operations. All packages compile successfully.",
        "priority": "medium",
        "dependencies": ["0.2"],
        "testStrategy": "Verify directory structure created, test Go package compilation, verify imports work correctly."
      }
    ]
  },
  {
    "id": "1",
    "title": "PHASE 1: Enhanced SBOM and System Fingerprinting",
    "description": "Implement comprehensive system fingerprinting and SBOM collection with database integration.",
    "details": "Key Outputs: Enhanced package detection, system hardware enumeration, network configuration collection, certificate inventory, database persistence.",
    "status": "done",
    "priority": "high",
    "dependencies": ["0"],
    "subtasks": [
      {
        "id": "1.1",
        "title": "Extend Scan Command Data Structures",
        "description": "Enhance existing scan types and add new structures for comprehensive system data.",
        "details": "Extend ScanResult struct in types.go to include: SystemFingerprint (hardware, network, users), EnhancedPackageInfo (with CPE, dependencies, install dates), CertificateInventory, ServiceInformation. Maintain backwards compatibility with existing JSON output format.",
        "status": "done",
        "priority": "high",
        "dependencies": ["0.4"],
        "testStrategy": "Test JSON marshaling/unmarshaling, verify backwards compatibility, validate new field structures."
      },
      {
        "id": "1.2",
        "title": "Implement System Hardware Fingerprinting",
        "description": "Create cross-platform system hardware detection capabilities.",
        "details": "Create internal/fingerprint/system.go with functions for: CPU detection (model, cores, architecture), memory information (total, available), storage enumeration (drives, sizes, types), platform-specific implementations for Windows (WMI), Linux (proc/sys files), macOS (system_profiler).",
        "status": "done",
        "priority": "high",
        "dependencies": ["1.1"],
        "testStrategy": "Test on Windows/Linux/macOS systems, verify hardware information accuracy, test error handling for missing data."
      },
      {
        "id": "1.3",
        "title": "Implement Network Configuration Detection",
        "description": "Develop comprehensive network interface and configuration enumeration.",
        "details": "Created internal/fingerprint/network.go with comprehensive cross-platform network interface enumeration (name, MAC, IPs), routing table collection, DNS server detection, network adapter details. Implemented platform-specific commands: Linux (ip, netstat), Windows (Get-NetIPConfiguration), macOS (ifconfig, netstat). Integrated with scan command --fingerprint flag.",
        "status": "done",
        "priority": "high",
        "dependencies": ["1.1"],
        "testStrategy": "Verified all network interfaces detected (23 interfaces on macOS), tested IPv4/IPv6 address collection, validated DNS configuration accuracy, confirmed integration with scan command."
      },
      {
        "id": "1.4",
        "title": "Implement Certificate Store Inventory",
        "description": "Create certificate enumeration for system certificate stores.",
        "details": "Create certificate detection for: Windows (Cert:\\LocalMachine, Cert:\\CurrentUser), Linux (/etc/ssl/certs/), macOS (Keychain). Extract certificate details: subject, issuer, expiration, fingerprint, key usage. Handle certificate parsing errors gracefully.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Comprehensive certificate store inventory implementation completed. Created CertificateCollectorImpl with cross-platform support for Windows (PowerShell certificate store queries), Linux (file-based certificate directory scanning), and macOS (security command keychain access). Implemented certificate parsing for PEM/DER formats, SHA256 fingerprinting, key usage extraction, certificate validation with expiration checking, and graceful error handling. Integrated with scan command fingerprinting, added to JSONB data structures, and included comprehensive unit tests covering all scenarios including certificate validation, file loading, and platform-specific methods.",
        "priority": "medium",
        "dependencies": ["1.1"],
        "testStrategy": "Test certificate enumeration on all platforms, verify certificate detail extraction, test with expired/invalid certificates."
      },
      {
        "id": "1.5",
        "title": "Enhance Package Detection with Metadata",
        "description": "Extend existing package detection to include additional metadata.",
        "details": "Enhanced Linux, Windows, macOS package detection to include: install dates, package sizes, descriptions, dependencies, CPE identifiers where available. Updated existing dpkg/rpm/registry queries to extract additional fields. Handles missing metadata gracefully. Implemented gatherEnhancedLinuxPackages, gatherEnhancedWindowsPackages, gatherEnhancedMacOSPackages with enhanced PowerShell scripts, dpkg/rpm queries with metadata, and system_profiler integration for macOS applications.",
        "status": "done",
        "priority": "high",
        "dependencies": ["1.1"],
        "testStrategy": "Verified enhanced package metadata on test systems, tested with systems missing metadata, validated enhanced data structures and backward compatibility conversion."
      },
      {
        "id": "1.6",
        "title": "Integrate SBOM Data with Database",
        "description": "Implement database persistence for SBOM and fingerprinting data.",
        "details": "Update agent API client to send enhanced scan data to sirius-api. Modify host handler to accept and store JSONB data in new schema fields. Implement merge strategy to preserve existing data from other sources. Use source attribution system for agent data.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Comprehensive SBOM database integration implemented end-to-end. Agent-side: UpdateHostRecordWithEnhancedData API client, convertScanResultToHostWithJSONB data conversion, automatic submission when enhanced data exists. API-side: AddHostWithSource handler accepts EnhancedHostRequest with JSONB fields, AddHostWithSourceAndJSONB SDK function stores data properly, enhanced data retrieval functions (GetHostWithEnhancedData, GetHostSoftwareInventory, GetHostSystemFingerprint, GetHostSoftwareStatistics). Database: JSONB columns with proper GIN indexes and constraints. Testing: Comprehensive integration tests in database_integration_test.go and enhanced_endpoints_test.go. Source attribution system preserves data from multiple sources.",
        "priority": "high",
        "dependencies": ["0.3", "1.5"],
        "testStrategy": "Test SBOM data persistence, verify merge behavior with multiple scans, test source attribution functionality."
      },
      {
        "id": "1.7",
        "title": "Update API Endpoints for Enhanced Data",
        "description": "Modify sirius-api endpoints to handle and return enhanced host information.",
        "details": "Update GET /host/{id} endpoint to include SBOM and fingerprinting data. Add query parameters for data filtering (packages, certificates, hardware). Update host statistics calculations to include software inventory. Maintain API backwards compatibility.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Comprehensive API endpoint enhancements implemented. Enhanced GetHost endpoint with query parameters (include=packages,fingerprint,metadata; enhanced=true), new dedicated endpoints (/host/{id}/packages, /host/{id}/fingerprint, /host/{id}/software-stats), enhanced data functions for JSONB field retrieval, updated HostRiskStats integration, 100% test coverage for all new structures, backward compatibility maintained.",
        "priority": "medium",
        "dependencies": ["1.6"],
        "testStrategy": "Test API endpoints return enhanced data, verify filtering functionality, test backwards compatibility with existing clients."
      }
    ]
  },
  {
    "id": "2",
    "title": "PHASE 2: Template-Based Vulnerability Detection Framework",
    "description": "Implement YAML template system for custom vulnerability detection with file hash, registry, and configuration file scanning.",
    "details": "Key Outputs: YAML template parser, file hash detection engine, registry scanning (Windows), configuration file pattern matching, template repository structure.",
    "status": "done",
    "priority": "high",
    "dependencies": ["1"],
    "subtasks": [
      {
        "id": "2.1",
        "title": "Design Template Data Structures and Interfaces",
        "description": "Create comprehensive type definitions for vulnerability templates and detection results.",
        "details": "Create internal/detect/template/types.go with: VulnTemplate struct matching YAML schema, DetectionResult struct for execution results, Evidence struct for proof details, TemplateEngine interface. Define template types: file-hash, registry, config-file. Include validation interfaces and error types.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Comprehensive template data structures and interfaces fully implemented in app-agent/internal/detect/types.go and interfaces.go. Created VulnTemplate with TemplateInfo metadata, DetectionConfig supporting file-hash/registry/config-file types, DetectionTarget/FileTarget/RegistryTarget for platform-specific detection, DetectionCondition for condition evaluation, RemediationInfo with verification guidance. Implemented complete interface set: DetectionEngine (main orchestrator), TemplateEngine (parsing/execution), ScriptEngine (secure script execution), HashEngine (hash verification). Added DetectionResult/Evidence structures, DetectionReport aggregation, comprehensive error handling, severity levels, and evidence types. All data structures support YAML serialization and cross-platform operations.",
        "priority": "high",
        "dependencies": ["0.4"],
        "testStrategy": "Test struct serialization/deserialization, verify interface implementations, validate error handling."
      },
      {
        "id": "2.2",
        "title": "Implement YAML Template Parser",
        "description": "Create robust YAML template parsing with validation and error handling.",
        "details": "Create internal/detect/template/parser.go with: YAML unmarshaling with schema validation, template syntax verification, cross-platform path normalization, template metadata extraction. Support template versioning and backwards compatibility. Validate required fields and data types.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Comprehensive YAML template parser fully implemented in app-agent/internal/detect/template/parser.go. Created TemplateParser with LoadTemplates directory discovery, LoadTemplate single file parsing with gopkg.in/yaml.v3, ValidateTemplate comprehensive structure validation (required fields, severity levels, detection types, conditions), normalizePlatformPaths cross-platform path handling, FilterTemplatesByPlatform for platform-specific filtering, template caching with loadedTemplates map, graceful error handling with detailed error reporting, support for .yaml/.yml extensions, template statistics and metadata tracking. Parser validates template ID, name, severity, detection configuration, and type-specific requirements (file-hash targets, registry keys, config files).",
        "priority": "high",
        "dependencies": ["2.1"],
        "testStrategy": "Test parsing valid/invalid YAML templates, verify schema validation, test error reporting for malformed templates."
      },
      {
        "id": "2.3",
        "title": "Implement File Hash Detection Engine",
        "description": "Create file hash calculation and matching system for vulnerability detection.",
        "details": "Create internal/detect/hash/ package with: hash calculation (SHA256, SHA1, MD5), file existence verification, executable/permission checking, cross-platform path handling. Support multiple hash targets per template. Implement efficient hash calculation with streaming for large files.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Comprehensive file hash detection engine fully implemented in app-agent/internal/detect/hash/. Created HashCalculator with CalculateFileHash supporting SHA256/SHA1/MD5/SHA512 algorithms, VerifyFileHash for single file verification, BatchHashCheck for efficient bulk verification, GetFileInfo with file existence/size/permissions/executable checking, streaming hash calculation using io.Copy for memory efficiency with large files, ValidateHashString for hash format validation, cross-platform file handling with os package, comprehensive error handling and logging, FileInfo and HashVerificationResult types for detailed file metadata. Integrated with template executor for file-hash detection type.",
        "priority": "high",
        "dependencies": ["2.1"],
        "testStrategy": "Test hash calculations against known files, verify cross-platform path handling, test with missing/inaccessible files."
      },
      {
        "id": "2.4",
        "title": "Implement Windows Registry Detection",
        "description": "Create Windows registry scanning capabilities for template-based detection.",
        "details": "Create Windows-specific registry detection in template executor: registry key existence checking, value extraction and pattern matching, version string parsing, handle different value types (string, DWORD, binary). Implement safe registry access with proper error handling.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Comprehensive Windows registry detection engine implemented with RegistryReader supporting PowerShell-based registry queries for cross-platform compatibility, RegistryResult/RegistryValue types for structured results, BatchCheckRegistryKeys for efficient bulk operations, pattern matching with regex support for vulnerability detection, comprehensive template integration with executeRegistryDetection method, condition evaluation for key_exists/value_matches_pattern, test registry templates (windows-software-vulns.yaml, windows-service-vulns.yaml, windows-test-registry.yaml) for common vulnerabilities, Windows Docker test setup with Dockerfile.windows-test and docker-compose.windows-test.yml, PowerShell test script for standalone testing, cross-compiled Windows executable (agent-windows.exe) ready for deployment. Registry detection works on both native Windows and cross-platform environments with PowerShell Core availability.",
        "priority": "medium",
        "dependencies": ["2.1"],
        "testStrategy": "Test registry detection on Windows systems, verify pattern matching, test with missing keys/values."
      },
      {
        "id": "2.5",
        "title": "Implement Configuration File Pattern Matching",
        "description": "Create configuration file scanning with regex pattern matching.",
        "details": "Create config file detection capabilities: file reading with encoding detection, regex pattern matching, line-by-line scanning for large files, multi-pattern support per file. Handle binary files gracefully, implement file size limits for safety.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Comprehensive configuration file pattern matching engine fully implemented in app-agent/internal/detect/config/. Created ConfigFileReader with AnalyzeConfigFile for single file analysis, BatchAnalyzeConfigFiles for bulk processing, regex pattern compilation with caching, line-by-line scanning with configurable limits (10MB file size, 16KB line length), binary file detection to skip non-text files, timeout controls (30s default), multi-pattern support per file with capture groups, ConfigFileResult/PatternMatch types for detailed results, comprehensive error handling and logging. Integrated with template executor executeConfigFileDetection method. Created test template apache-security-test.yaml demonstrating Apache misconfiguration detection with ServerTokens, ServerSignature, and directory indexing patterns.",
        "priority": "medium",
        "dependencies": ["2.1"],
        "testStrategy": "Test pattern matching on various config files, verify regex compilation, test with binary and large files."
      },
      {
        "id": "2.6",
        "title": "Create Template Execution Engine",
        "description": "Implement the main template execution orchestrator and result aggregation.",
        "details": "Create internal/detect/template/executor.go with: template loading and validation, detection method routing (hash/registry/config), result aggregation and confidence scoring, evidence collection, parallel execution support. Implement timeout controls and resource limits.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Template execution engine fully implemented with NewTemplateExecutor, template loading/validation, file hash detection via HashCalculator, concurrent execution with semaphore controls, confidence scoring (0.0-1.0), evidence collection with context metadata, platform-aware filtering, and comprehensive error handling. Integrated with scan command producing TemplateDetectionResult structures with vulnerability evidence.",
        "priority": "high",
        "dependencies": ["2.3", "2.4", "2.5"],
        "testStrategy": "Test template execution with all detection types, verify result aggregation, test timeout and resource limit handling."
      },
      {
        "id": "2.7",
        "title": "Create Initial Template Repository",
        "description": "Design template repository structure and create initial vulnerability templates.",
        "details": "Create templates/ directory structure with subdirectories by type. Create initial templates for common vulnerabilities: Apache/Nginx file hash templates, Windows software registry templates, SSH/Apache configuration templates. Include template metadata and version information.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Template repository structure established with hash-based, registry-based, and config-based subdirectories. Created initial vulnerability templates including test-vulnerable-file.yaml for hash detection and apache-example.yaml demonstrating template format. Templates include proper YAML schema with ID, info section, detection methods, conditions, metadata, and remediation guidance. Directory auto-discovery working from /app-agent/templates in container environment.",
        "priority": "medium",
        "dependencies": ["2.6"],
        "testStrategy": "Verify template directory structure, test template loading, validate template syntax and metadata."
      },
      {
        "id": "2.8",
        "title": "Integrate Template Detection with Main Scan Command",
        "description": "Add template-based detection as optional module in main scan command.",
        "details": "Update scan command to support template detection: add --templates flag for selective execution, integrate with existing scan flow, add template results to scan output JSON. Maintain backwards compatibility and ensure templates don't slow down basic scans.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Template detection fully integrated with scan command as default behavior. Templates now execute automatically on every scan, producing clean summarized output with total_templates, vulnerable_found, successful_ids, and vulnerability_details. Removed --templates flag requirement - templates run by default. Results include TemplateDetectionResult structures with evidence, confidence scoring, and metadata. Template directory resolution works in both development (/app-agent/templates) and production deployment modes.",
        "priority": "high",
        "dependencies": ["2.6", "2.7"],
        "testStrategy": "Test scan command with template detection enabled, verify output format, test selective template execution."
      }
    ]
  },
  {
    "id": "3",
    "title": "PHASE 3: Script-Based Vulnerability Detection Framework",
    "description": "Implement secure custom script execution for PowerShell and Bash vulnerability detection scripts.",
    "details": "Key Outputs: Script execution framework, PowerShell/Bash executors, security sandboxing, script repository management, standardized result format.",
    "status": "pending",
    "priority": "high",
    "dependencies": ["2"],
    "subtasks": [
      {
        "id": "3.1",
        "title": "Design Script Execution Framework",
        "description": "Create comprehensive script execution architecture with security controls.",
        "details": "Create internal/detect/script/ package with: ScriptExecutor interface, platform-specific implementations, security sandbox controls, timeout management, resource limiting, result standardization. Define script metadata format and validation requirements.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Comprehensive script execution framework implemented. Created ScriptExecutor with interpreter detection (PowerShell, Bash, Python), script loading/validation, metadata extraction from comments/docstrings, security sandbox controls, timeout management, platform-specific execution, JSON/structured output parsing, evidence collection, and comprehensive error handling. Supports .ps1, .sh, .py files with checksum validation and concurrent execution controls.",
        "priority": "high",
        "dependencies": ["0.4"],
        "testStrategy": "Test interface implementations, verify security controls, validate result standardization."
      },
      {
        "id": "3.2",
        "title": "Implement PowerShell Script Executor",
        "description": "Create secure PowerShell script execution for Windows vulnerability detection.",
        "details": "Create internal/detect/script/powershell.go with: PowerShell process execution, execution policy handling, script parameter passing, JSON result parsing, error handling and logging. Implement execution sandbox with restricted privileges and network access controls.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - PowerShell script executor fully implemented with security controls. Features: PowerShell Core/Windows PowerShell detection, secure command building with -NoProfile/-NonInteractive flags, argument escaping, sandbox restrictions, minimal environment variables, JSON/structured text output parsing, evidence extraction, heuristic vulnerability analysis, timeout handling, and comprehensive error handling. Supports both Windows and cross-platform PowerShell Core execution.",
        "priority": "high",
        "dependencies": ["3.1"],
        "testStrategy": "Test PowerShell script execution, verify sandbox restrictions, test with various script types and error conditions."
      },
      {
        "id": "3.3",
        "title": "Implement Bash Script Executor",
        "description": "Create secure Bash script execution for Linux/macOS vulnerability detection.",
        "details": "Create internal/detect/script/bash.go with: bash/sh process execution, environment variable control, script parameter passing, JSON result parsing, signal handling for timeouts. Implement execution sandbox with chroot/container restrictions where possible.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Bash script executor fully implemented with comprehensive security controls. Features: secure Bash execution with -e/-u/-o pipefail flags, argument escaping, process group isolation, minimal environment variables, restricted PATH, separate stdout/stderr capture, Bash-specific output parsing (VULNERABLE=, CONFIDENCE=, EVIDENCE= patterns), exit code analysis, Python script execution support, and Unix sandbox restrictions. Includes comprehensive timeout and signal handling.",
        "priority": "high",
        "dependencies": ["3.1"],
        "testStrategy": "Test Bash script execution on Linux/macOS, verify sandbox restrictions, test timeout and signal handling."
      },
      {
        "id": "3.4",
        "title": "Implement Script Security Sandboxing",
        "description": "Create comprehensive security controls for script execution.",
        "details": "SKIPPED FOR MVP: Advanced security sandboxing not required for initial release. Basic script execution controls in ScriptExecutor are sufficient for MVP. Can be implemented in future sprint if needed.",
        "status": "cancelled",
        "priority": "low",
        "dependencies": ["3.2", "3.3"],
        "testStrategy": "Test privilege escalation prevention, verify filesystem restrictions, test resource limit enforcement."
      },
      {
        "id": "3.5",
        "title": "Create Script Repository Structure",
        "description": "Design and implement script repository with version control and validation.",
        "details": "Create scripts/ directory structure by platform and purpose. Implement script metadata validation, version tracking, checksum verification. Create initial vulnerability detection scripts for: Windows service permissions, SUID binary analysis, certificate validation, configuration auditing.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Script repository structure fully implemented with comprehensive validation and metadata tracking. Created ScriptRepository with manifest-based versioning, checksum verification, platform/severity filtering, automated metadata extraction from PowerShell/Bash/Python scripts. Implemented 4 vulnerability detection scripts: Windows service permissions (PowerShell), SUID binary analysis (Bash), certificate validation (cross-platform Python), and configuration auditing (Linux Bash). All scripts validated successfully with proper metadata extraction, security controls, and JSON result formatting. Repository supports script discovery, validation, and platform-specific filtering.",
        "priority": "medium",
        "dependencies": ["3.4"],
        "testStrategy": "Verify script repository structure, test metadata validation, validate initial script functionality."
      },
      {
        "id": "3.6",
        "title": "Implement Script Result Standardization",
        "description": "Create standardized JSON output format for all script types with validation.",
        "details": "Define standard script result JSON schema with: vulnerability_id, vulnerable boolean, confidence score, evidence array, metadata object, error handling. Implement result validation and normalization. Create helper functions for scripts to generate compliant output.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["3.1", "3.2", "3.3"],
        "testStrategy": "Test result format validation, verify schema compliance, test with various script output formats."
      },
      {
        "id": "3.7",
        "title": "Integrate Script Detection with Scan Command",
        "description": "Add script-based detection as optional module in main scan command.",
        "details": "CRITICAL: Current scan command has basic script execution but does NOT use the comprehensive ScriptExecutor framework from internal/detect/script/. Need to replace the basic executeCustomScripts function with proper ScriptExecutor integration. The --scripts flag exists but only works on Windows. Must integrate the cross-platform script framework (Bash, PowerShell, Python) that was built in tasks 3.1-3.3.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["3.1", "3.2", "3.3"],
        "testStrategy": "Test scan command with script detection enabled, verify selective script execution, test cross-platform compatibility."
      },
      {
        "id": "3.8",
        "title": "Implement Script Audit Logging",
        "description": "Create comprehensive audit logging for all script executions.",
        "details": "Implement detailed logging for: script execution attempts, execution results, security violations, resource usage, execution duration. Include script content hashes, execution context, and user identification. Ensure logs are tamper-evident and properly formatted.",
        "status": "pending",
        "priority": "medium",
        "dependencies": ["3.7"],
        "testStrategy": "Verify comprehensive logging coverage, test log integrity, validate log format and searchability."
      }
    ]
  },
  {
    "id": "4",
    "title": "PHASE 4: Repository Management and Update System",
    "description": "Implement template and script repository management with remote updates, versioning, and security validation.",
    "details": "Key Outputs: Repository manager, remote update mechanism, GPG signature verification, version control, atomic updates.",
    "status": "pending",
    "priority": "medium",
    "dependencies": ["2", "3"],
    "subtasks": [
      {
        "id": "4.1",
        "title": "Complete Repository Structure",
        "description": "Complete the sirius-agent-modules repository structure with all required components.",
        "details": "Add missing directories and files to sirius-agent-modules: templates/registry-based/, scripts/windows/, scripts/linux/, create repository-manifest.json, update README.md, add contribution guidelines, create example templates and scripts.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Repository structure fully implemented. Added missing directories (registry-based templates, windows/linux scripts), created top-level repository-manifest.json, updated README.md with proper description, added comprehensive contribution guidelines, created example templates and scripts. Repository now contains 3 templates (hash-based, registry-based, config-based) and 4 scripts (Windows PowerShell, Linux Bash, cross-platform Python) with proper manifests and documentation.",
        "priority": "high",
        "dependencies": ["0.4"],
        "testStrategy": "Verify repository structure completeness, test template/script loading, validate manifest formats."
      },
      {
        "id": "4.2",
        "title": "Implement Repository Manager",
        "description": "Create comprehensive repository management system with GitHub integration.",
        "details": "Create internal/repository/github_manager.go with: GitHub repository synchronization, manifest-based version tracking, incremental update detection, atomic update application, checksum validation, backup and rollback support. Support sirius-agent-modules repository integration.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Repository manager fully implemented with GitHub integration. Created GitHubRepositoryManager with repository synchronization, manifest-based version tracking, incremental update detection, atomic update application, checksum validation, backup and rollback support. Supports sirius-agent-modules repository integration with proper error handling and comprehensive testing.",
        "priority": "high",
        "dependencies": ["4.1"],
        "testStrategy": "Test repository manager functionality, verify GitHub integration, test update mechanisms."
      },
      {
        "id": "4.3",
        "title": "Integrate Repository with Agent",
        "description": "Connect sirius-agent-modules repository to agent scan command and script executor.",
        "details": "Create internal/repository/integration.go with: repository initialization, template loading from repository, script loading from repository, update coordination, error handling and recovery. Integrate with scan command and script executor to load templates and scripts from sirius-agent-modules.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Repository integration fully implemented and tested. Created internal/repository/integration.go with comprehensive repository management, template/script loading from sirius-agent-modules repository, manifest parsing (repository-manifest.json), fallback directory scanning, merge resource directories functionality, and proper error handling. Successfully loads 4 templates and 3 scripts from repository. Repository integration test confirms proper initialization, status reporting, and content loading. Integration ready for scan command and script executor integration.",
        "priority": "high",
        "dependencies": ["4.2", "2.8", "3.7"],
        "testStrategy": "Test repository integration with scan command, verify template/script loading, test update coordination."
      },
      {
        "id": "4.4",
        "title": "Create Repository CLI Commands",
        "description": "Add command-line interface for repository management.",
        "details": "Create new agent commands: 'internal:repo-status' for repository status, 'internal:repo-update' for manual updates, 'internal:repo-list' for content listing, 'internal:repo-validate' for integrity validation. Include verbose output, error reporting, and progress indication.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Repository CLI commands fully implemented and tested. Created internal/commands/repo/repo_command.go with comprehensive repository management interface. Commands include: 'internal:repo status' (shows repository status, manifest version, content counts), 'internal:repo list' (lists all templates and scripts), 'internal:repo list templates' (filters templates), 'internal:repo list scripts' (filters scripts), 'internal:repo validate' (validates content integrity), 'internal:repo help' (shows help documentation). Commands properly registered with 'internal:repo' prefix to match agent command format. Test execution confirmed: successfully lists 4 templates and 3 scripts from repository, shows proper status information, provides helpful error messages and documentation. All commands working through agent command dispatch system.",
        "priority": "medium",
        "dependencies": ["4.3"],
        "testStrategy": "Test CLI commands functionality, verify output formatting, test error handling and progress reporting."
      },
      {
        "id": "4.5",
        "title": "Implement Repository Validation",
        "description": "Create comprehensive validation system for repository content.",
        "details": "Create internal/repository/validator.go with: manifest validation, checksum verification, file existence validation, version compatibility checking, template validation, script validation. Support offline validation and integrity checking.",
        "status": "pending",
        "priority": "medium",
        "dependencies": ["4.3"],
        "testStrategy": "Test validation system, verify checksum calculations, test version compatibility checking."
      },
      {
        "id": "4.6",
        "title": "Implement Automatic Update Scheduling",
        "description": "Create background update system with configurable intervals.",
        "details": "Implement background update service with: configurable update intervals, network availability checking, update retry logic, notification system for failures. Allow manual override and update postponement. Integrate with sirius-agent-modules repository.",
        "status": "pending",
        "priority": "low",
        "dependencies": ["4.4", "4.5"],
        "testStrategy": "Test automatic update scheduling, verify network availability detection, test retry and failure notification."
      },
      {
        "id": "4.7",
        "title": "Create Community Repository Setup",
        "description": "Setup sirius-agent-modules repository for community contributions.",
        "details": "Configure sirius-agent-modules repository for community contributions: setup pull request workflow, create contribution guidelines, implement automated validation, setup CI/CD for template and script validation. Ensure proper documentation and examples.",
        "status": "pending",
        "priority": "low",
        "dependencies": ["4.5"],
        "testStrategy": "Test community contribution workflow, verify automated validation, test CI/CD pipeline."
      },
      {
        "id": "4.8",
        "title": "Integrate Repository with Scan Command",
        "description": "Update scan command to use repository templates and scripts.",
        "details": "Modify scan command to initialize repository integration and merge repository directories with local directories. Update template and script loading to include repository content. Ensure repository templates and scripts are loaded and executed during scan operations.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Repository integration with scan command fully functional. Scan command successfully initializes repository integration, merges repository directories with local directories, and loads templates and scripts from both sources. Test execution confirmed: 4 templates loaded (1 from repository), 3 scripts loaded (2 from repository), successful execution of repository content. Repository templates and scripts are properly discovered and executed during scan operations.",
        "priority": "high",
        "dependencies": ["4.3"],
        "testStrategy": "Test scan command with repository integration, verify templates and scripts load from repository, test execution of repository content."
      },
      {
        "id": "4.9",
        "title": "Implement Repository Content Validation",
        "description": "Add validation for repository templates and scripts.",
        "details": "Create validation system for repository content: template YAML validation, script syntax checking, security validation, checksum verification. Implement validation before loading content into agent. Add validation to repository update process.",
        "status": "pending",
        "priority": "medium",
        "dependencies": ["4.3"],
        "testStrategy": "Test content validation, verify security checks, test validation during updates."
      },
      {
        "id": "4.10",
        "title": "Add Repository Background Services",
        "description": "Implement background services for repository management.",
        "details": "Create background services for: automatic repository updates, content validation, health monitoring, error recovery. Implement service lifecycle management, graceful shutdown, and error reporting. Integrate with agent background services.",
        "status": "pending",
        "priority": "medium",
        "dependencies": ["4.8", "4.9"],
        "testStrategy": "Test background services, verify update scheduling, test error recovery and monitoring."
      },
      {
        "id": "4.11",
        "title": "Implement Repository Caching",
        "description": "Add caching system for repository content.",
        "details": "Implement caching for: template parsing, script metadata, manifest data, validation results. Add cache invalidation on updates, memory usage monitoring, and cache persistence. Optimize for performance and memory usage.",
        "status": "pending",
        "priority": "low",
        "dependencies": ["4.8"],
        "testStrategy": "Test caching performance, verify cache invalidation, test memory usage under load."
      },
      {
        "id": "4.12",
        "title": "Create Repository Health Monitoring",
        "description": "Implement health monitoring for repository integration.",
        "details": "Create health monitoring for: repository connectivity, content validity, update status, error rates. Implement health check endpoints, monitoring dashboards, and alerting. Track repository performance metrics.",
        "status": "pending",
        "priority": "low",
        "dependencies": ["4.10"],
        "testStrategy": "Test health monitoring, verify alerting, test performance metrics collection."
      }
    ]
  },
  {
    "id": "5",
    "title": "PHASE 5: Custom Template/Script Management System",
    "description": "Implement user-customizable template and script management through Agent Server with UI-based creation and deployment.",
    "details": "Key Outputs: Agent Server custom storage, UI-based creation tools, agent distribution system, priority management, conflict resolution.",
    "status": "pending",
    "priority": "high",
    "dependencies": ["4"],
    "subtasks": [
      {
        "id": "5.0",
        "title": "Clean Up Incorrect Engine-Based Implementation",
        "description": "Remove incorrect custom-content-api implementation from sirius-engine.",
        "details": "ARCHITECTURE CORRECTION: Removed incorrect custom-content-api application from sirius-engine/apps/ and custom-manifest.json from sirius-engine/. The Engine should remain a clean container that hosts applications, not become a place for custom apps. Custom content management should be implemented through the Agent Server instead.",
        "status": "done",
        "completion_notes": "✅ COMPLETE - Cleaned up incorrect Engine-based implementation. Removed sirius-engine/apps/custom-content-api/ directory and sirius-engine/custom-manifest.json file. Architecture now correctly focuses on Agent Server for custom content management.",
        "priority": "high",
        "dependencies": ["4.8"],
        "testStrategy": "Verify Engine remains clean container, confirm no custom apps in Engine, validate correct architecture approach."
      },
      {
        "id": "5.1",
        "title": "Implement Agent Server Custom Storage",
        "description": "Create storage system for custom templates and scripts in the Agent Server.",
        "details": "Extend the Agent Server (app-agent/cmd/server/) to include custom template/script storage: custom-templates/ and custom-scripts/ directories, custom-manifest.json for tracking, REST API endpoints for CRUD operations, validation system for templates and scripts, security checks for script content, versioning system for custom content. Integrate with existing gRPC server infrastructure.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["5.0"],
        "testStrategy": "Test custom storage creation in Agent Server, verify API endpoints, test validation system, verify security checks."
      },
      {
        "id": "5.2",
        "title": "Implement Agent Server Custom Content RabbitMQ Listener",
        "description": "Implement a RabbitMQ consumer in the Agent Server that listens for custom content update messages (from the UI or other services) and updates its local custom template/script storage accordingly.",
        "details": "The Agent Server will listen for messages on a RabbitMQ queue (e.g., 'custom_content_updates'). Messages will contain operations such as create, update, or delete for custom templates/scripts. The Agent Server will update its local storage and manifest in response to these messages. The UI can send messages directly to this queue, no REST API is required.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["5.1"],
        "subtasks": [
          {
            "id": "5.2.1",
            "title": "Define RabbitMQ Message Schema",
            "description": "Define the JSON schema for custom content operations (create, update, delete) including type, id, content, and metadata.",
            "status": "pending"
          },
          {
            "id": "5.2.2",
            "title": "Implement RabbitMQ Consumer in Agent Server",
            "description": "Add a background goroutine to the Agent Server that listens for messages on the 'custom_content_updates' queue.",
            "status": "pending"
          },
          {
            "id": "5.2.3",
            "title": "Parse and Validate Incoming Messages",
            "description": "Parse and validate the payload of each message, ensuring required fields are present and valid.",
            "status": "pending"
          },
          {
            "id": "5.2.4",
            "title": "Update Local Storage Based on Message",
            "description": "Create, update, or delete files and update the manifest in response to each message.",
            "status": "pending"
          },
          {
            "id": "5.2.5",
            "title": "Log Actions and Errors",
            "description": "Log all actions and errors for observability and troubleshooting.",
            "status": "pending"
          },
          {
            "id": "5.2.6",
            "title": "(Optional) Send Acknowledgment or Error Response",
            "description": "Optionally, send an acknowledgment or error response back via RabbitMQ for each processed message.",
            "status": "pending"
          },
          {
            "id": "5.2.7",
            "title": "Update Documentation for Message-Driven Architecture",
            "description": "Update project documentation to reflect the new RabbitMQ-based custom content management flow.",
            "status": "pending"
          }
        ],
        "testStrategy": "Test by sending messages from the UI to the RabbitMQ queue and verifying that the Agent Server updates its local storage and manifest accordingly. Check logs for correct processing and error handling."
      },
      {
        "id": "5.3",
        "title": "Create Agent Server Custom Content API Endpoints",
        "description": "Implement REST API endpoints in the Agent Server for custom template and script management.",
        "details": "Extend the Agent Server with REST API endpoints: POST/GET/PUT/DELETE /api/custom/templates, POST/GET/PUT/DELETE /api/custom/scripts, POST /api/custom/deploy for agent distribution, GET /api/custom/status for deployment status, validation middleware for template YAML and script syntax, access control and permissions system. Integrate with existing gRPC server and queue processing infrastructure.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["5.2"],
        "testStrategy": "Test all API endpoints in Agent Server, verify CRUD operations, test validation, verify access controls, test integration with gRPC infrastructure."
      },
      {
        "id": "5.4",
        "title": "Create UI Template Builder",
        "description": "Build web-based template creation interface in sirius-ui that communicates with Agent Server.",
        "details": "Create template builder UI in sirius-ui: YAML editor with syntax highlighting, form-based template creation with validation, template preview and testing, template library management, deployment controls for specific hosts or host groups, template versioning and rollback interface. Integrate with Agent Server API endpoints for template management.",
        "status": "pending",
        "priority": "medium",
        "dependencies": ["5.2"],
        "testStrategy": "Test template builder interface, verify YAML validation, test template creation workflow, verify deployment controls, test Agent Server API integration."
      },
      {
        "id": "5.5",
        "title": "Create UI Script Editor",
        "description": "Build web-based script creation interface in sirius-ui that communicates with Agent Server.",
        "details": "Create script editor UI in sirius-ui: Monaco Editor with language support (PowerShell, Bash, Python), script syntax validation, script metadata editor, script testing interface, deployment controls, script library management, version control interface. Integrate with Agent Server API endpoints for script management.",
        "status": "pending",
        "priority": "medium",
        "dependencies": ["5.2"],
        "testStrategy": "Test script editor interface, verify syntax highlighting, test script validation, verify deployment workflow, test Agent Server API integration."
      },
      {
        "id": "5.6",
        "title": "Implement Custom Content Management Dashboard",
        "description": "Create management interface for custom templates and scripts in sirius-ui.",
        "details": "Create management dashboard in sirius-ui: list all custom templates and scripts, edit/delete custom content, enable/disable custom content, deployment status tracking, conflict resolution interface, version history and rollback, bulk operations for deployment. Integrate with Agent Server API for all management operations.",
        "status": "pending",
        "priority": "medium",
        "dependencies": ["5.4", "5.5"],
        "testStrategy": "Test management dashboard, verify CRUD operations, test deployment tracking, verify conflict resolution, test Agent Server API integration."
      },
      {
        "id": "5.7",
        "title": "Implement Priority and Conflict Resolution System",
        "description": "Create system for managing custom content priority and conflicts between Agent Server and repository content.",
        "details": "Implement priority system: custom content from Agent Server overrides repository content, naming conflict resolution, version management for custom content, rollback capability for custom content, migration path from custom to repository, conflict detection and resolution UI. Extend both Agent Server and agent client to handle priority resolution.",
        "status": "pending",
        "priority": "medium",
        "dependencies": ["5.3"],
        "testStrategy": "Test priority system, verify conflict resolution, test rollback functionality, verify migration path, test Agent Server priority handling."
      },
      {
        "id": "5.8",
        "title": "Create Custom Content Security System",
        "description": "Implement security controls for custom template and script execution in Agent Server.",
        "details": "Implement security controls in Agent Server: template YAML validation and security scanning, script sandboxing with execution limits, resource constraints for script execution, audit logging for custom content creation and deployment, access control for custom content management, security validation before deployment. Extend existing agent security framework for custom content.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["5.3"],
        "testStrategy": "Test security controls in Agent Server, verify sandboxing, test audit logging, verify access controls, test integration with existing agent security framework."
      },
      {
        "id": "5.9",
        "title": "Integrate Custom Content with Scan Command",
        "description": "Update scan command to include custom templates and scripts from Agent Server.",
        "details": "Modify scan command to load and execute custom templates and scripts from Agent Server alongside repository content, implement custom content priority system, add custom content to scan results, include custom content in vulnerability reporting, maintain backward compatibility with existing scan functionality. Extend existing scan command to support Agent Server custom content synchronization.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["5.3"],
        "testStrategy": "Test scan command with custom content from Agent Server, verify priority system, test vulnerability reporting, verify backward compatibility, test Agent Server integration."
      },
      {
        "id": "5.10",
        "title": "Create Custom Content Documentation",
        "description": "Develop documentation for custom template and script creation using Agent Server.",
        "details": "Create comprehensive documentation: custom template creation guide, custom script development guide, UI usage instructions, deployment procedures, troubleshooting guide, best practices for custom content, security guidelines for custom scripts, examples and templates. Include Agent Server integration documentation and API reference.",
        "status": "pending",
        "priority": "low",
        "dependencies": ["5.9"],
        "testStrategy": "Review documentation completeness, verify examples work correctly, test documentation against real scenarios, verify Agent Server integration documentation."
      }
    ]
  },
  {
    "id": "6",
    "title": "PHASE 6: Integration, Testing, and Optimization",
    "description": "Complete end-to-end integration, comprehensive testing, performance optimization, and documentation.",
    "details": "Key Outputs: End-to-end integration testing, performance optimization, security audit, comprehensive documentation, deployment preparation.",
    "status": "pending",
    "priority": "medium",
    "dependencies": ["1", "2", "3", "4", "5"],
    "subtasks": [
      {
        "id": "6.1",
        "title": "Implement Enhanced Detect Command",
        "description": "Create dedicated vulnerability detection command integrating templates and scripts.",
        "details": "Create 'internal:detect' command with: template execution, script execution, result aggregation, filtering options, output formatting. Support selective execution by vulnerability ID, severity, or platform. Include detailed progress reporting.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["2.8", "3.7"],
        "testStrategy": "Test detect command with all detection types, verify filtering and output options, test progress reporting."
      },
      {
        "id": "6.2",
        "title": "Update Database Integration for Custom Vulnerabilities",
        "description": "Extend database integration to store custom vulnerability detection results.",
        "details": "Update host handlers to accept and store custom vulnerability results. Link template/script detections to existing vulnerability records using CVE/custom IDs. Implement result deduplication and confidence tracking. Use existing source attribution system.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["1.6", "6.1"],
        "testStrategy": "Test custom vulnerability storage, verify deduplication logic, test source attribution for custom detections."
      },
      {
        "id": "6.3",
        "title": "Comprehensive Integration Testing",
        "description": "Execute end-to-end testing across all agent enhancement features.",
        "details": "Test complete workflows: terminal command execution, SBOM data persistence, template detection, script execution, repository updates, custom content management. Test cross-platform compatibility, error handling, and recovery scenarios. Include load testing with large inventories.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["6.2"],
        "testStrategy": "Execute comprehensive test suite, verify all workflows, test error scenarios and recovery, validate cross-platform operation."
      },
      {
        "id": "6.4",
        "title": "Performance Optimization and Tuning",
        "description": "Optimize agent performance for large-scale deployments and resource-constrained environments.",
        "details": "Optimize: scan execution time, memory usage during large scans, database query performance, template/script loading, custom content management. Implement concurrent execution where safe, caching for repeated operations, and progress reporting for long operations.",
        "status": "pending",
        "priority": "medium",
        "dependencies": ["6.3"],
        "testStrategy": "Benchmark performance improvements, test resource usage under load, verify concurrent execution safety."
      },
      {
        "id": "6.5",
        "title": "Security Audit and Hardening",
        "description": "Conduct comprehensive security review and implement additional hardening measures.",
        "details": "Review: script execution security, template validation security, repository update security, custom content security, data transmission security. Implement additional controls as needed. Conduct penetration testing of script execution and template processing.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["6.3"],
        "testStrategy": "Execute security tests, verify all security controls, test against common attack vectors, validate audit logging."
      },
      {
        "id": "6.6",
        "title": "Update UI Components for Enhanced Data",
        "description": "Modify sirius-ui to display new SBOM and fingerprinting information.",
        "details": "Update host detail pages to show: software inventory, system fingerprinting data, custom vulnerability results. Add filtering and search capabilities for software packages. Include visualization for system information and certificate status.",
        "status": "pending",
        "priority": "medium",
        "dependencies": ["6.2"],
        "testStrategy": "Test UI components display enhanced data correctly, verify filtering and search functionality, test responsive design."
      },
      {
        "id": "6.7",
        "title": "Create Comprehensive Documentation",
        "description": "Develop complete documentation for all agent enhancement features.",
        "details": "Create documentation for: API changes and new endpoints, template development guide, script development guide, repository management, custom content management, deployment procedures, troubleshooting guide. Include examples and best practices.",
        "status": "pending",
        "priority": "medium",
        "dependencies": ["6.4", "6.5"],
        "testStrategy": "Review documentation completeness, verify examples work correctly, test documentation against real scenarios."
      },
      {
        "id": "6.8",
        "title": "Prepare Production Deployment",
        "description": "Finalize production deployment preparation and migration procedures.",
        "details": "Prepare: database migration scripts, configuration updates, repository initialization, custom content setup, monitoring and alerting setup. Create deployment checklist and rollback procedures. Test migration on staging environment.",
        "status": "pending",
        "priority": "high",
        "dependencies": ["6.6", "6.7"],
        "testStrategy": "Test complete deployment procedure on staging, verify migration scripts, test rollback procedures, validate monitoring setup."
      }
    ]
  }
]


